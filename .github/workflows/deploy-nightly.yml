name: Deploy Nightly

on:
  schedule:
    - cron: '0 4 * * *'

  workflow_dispatch:
    inputs:
      dockerUrl:
        description: Docker url, where the UID will be deployed
        default: "tcp://docker.rd.lan:2375"
        required: true
      dockerName:
        description: Docker prefix name
        default: "nightly-uid"
        required: true
      port:
        description: Port where UID is running each night (50000 for dev, 50001 for master)
        default: "50000"
        required: true
jobs:
  deployNightly:
    name: Deploy Nightly docker image
    runs-on: ubuntu-22.04
    steps:
      - name: Extract parameter
        id: init
        run: |
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]
          then
              echo "baseBranch=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
              echo "dockerUrl=${github.event.inputs.dockerUrl}" >> $GITHUB_OUTPUT
              echo "dockerName=${github.event.inputs.dockerName}" >> $GITHUB_OUTPUT
              echo "port=${github.event.inputs.port}" >> $GITHUB_OUTPUT
          else
              echo "baseBranch=dev" >> $GITHUB_OUTPUT
              echo "dockerUrl=tcp://docker.rd.lan:2375" >> $GITHUB_OUTPUT
              echo "dockerName=nightly-uid" >> $GITHUB_OUTPUT
              echo "port=50000" >> $GITHUB_OUTPUT
          fi
      - name: Setup checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.init.outputs.baseBranch }}
      - name: Set up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build binaries
        if: ${{ success()}}
        run: ./mvnw -B package -DskipTests
      - name: Define env variable
        if: ${{ success()}}
        shell: bash
        run: |
          echo "DOCKER_IMAGE_NAME=$(echo ${{ steps.init.outputs.dockerName }}-${{ steps.init.outputs.baseBranch }})" | tr "/" - >> $GITHUB_ENV
      - name: Deploy to docker
        if: ${{ success()}}
        shell: bash
        run: |
          export DOCKER_HOST=${{ steps.init.outputs.dockerUrl }}
          (docker kill "${{ env.DOCKER_IMAGE_NAME }}" ) || true
          (docker rm -vf ${{ env.DOCKER_IMAGE_NAME }}) || true
          docker build -t bonita/${{ env.DOCKER_IMAGE_NAME }} .
          docker run -p ${{ steps.init.outputs.port }}:8080 --name="${{ env.DOCKER_IMAGE_NAME }}" -d bonita/"${{ env.DOCKER_IMAGE_NAME }}"
          echo Container is running on http://${{ steps.init.outputs.dockerUrl }}:${{ steps.init.outputs.port }}/bonita
